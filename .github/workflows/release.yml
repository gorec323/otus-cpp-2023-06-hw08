name: github release
on:
  workflow_run:
    workflows: [CMake on multiple platforms]
    types: [completed]

jobs:
  on-success:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
    - name: Download artifact
      id: download-artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        # Optional, GitHub token, a Personal Access Token with `public_repo` scope if needed
        # Required, if the artifact is from a different repo
        # Required, if the repo is private a Personal Access Token with `repo` scope is needed or GitHub token in a job where the permissions `action` scope set to `read`
        github_token: ${{secrets.GITHUB_TOKEN}}
        # Optional, workflow file name or ID
        # If not specified, will be inferred from run_id (if run_id is specified), or will be the current workflow
        workflow: cmake-multi-platform-build.yml
        # Optional, the status or conclusion of a completed workflow to search for
        # Can be one of a workflow conclusion:
        #   "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
        # Or a workflow status:
        #   "completed", "in_progress", "queued"
        # Use the empty string ("") to ignore status or conclusion in the search
        workflow_conclusion: success
        # Optional, will get head commit SHA
        # pr: ${{github.event.pull_request.number}}
        # Optional, no need to specify if PR is
        # commit: ${{github.event.pull_request.head.sha}}
        # Optional, will use the specified branch. Defaults to all branches
        # branch: master
        # Optional, defaults to all types
        # event: push
        # Optional, will use specified workflow run
        # use ${{ github.event.workflow_run.id }} when your action runs in a workflow_run event
        # and wants to download from the triggering workflow run
        # run_id: ${{ github.event.workflow_run.id }}
        # Optional, run number from the workflow
        run_number: ${{ github.run_number }}
        # Optional, uploaded artifact name,
        # will download all artifacts if not specified
        # and extract them into respective subdirectories
        # https://github.com/actions/download-artifact#download-all-artifacts
        # is treated as a regular expression if input name_is_regexp is true
        # will download only those artifacts with a name that matches this regular expression
        # https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions
        name: deb-package-art
        # Optional, name is treated as a regular expression if set true
        name_is_regexp: true
        # Optional, a directory where to extract artifact(s), defaults to the current directory
        path: build
        # Optional, defaults to current repo
        repo: ${{ github.repository }}
        # Optional, check the workflow run to whether it has an artifact
        # then will get the last available artifact from the previous workflow
        # default false, just try to download from the last one
        check_artifacts: false
        # Optional, search for the last workflow run whose stored an artifact named as in `name` input
        # default false
        search_artifacts: false
        # Optional, choose to skip unpacking the downloaded artifact(s)
        # default false
        skip_unpack: false
        # Optional, choose how to exit the action if no artifact is found
        # can be one of:
        #  "fail", "warn", "ignore"
        # default fail
        if_no_artifact_found: fail
        # Optional, ignore forks when searching for artifacts
        # default true
        allow_forks: false

    - name: Fixup artifacts
      run: |
        pwd
        ls -la 
        ls -la build

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        tag_name: v0.0.${{ github.run_number }}
        files: build/deb-package-art/*.deb
        draft: false
        prerelease: false

